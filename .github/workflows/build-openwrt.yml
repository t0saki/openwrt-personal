# 部分步骤借鉴https://github.com/P3TERX/Actions-OpenWrt/blob/main/.github/workflows/openwrt-builder.yml

name: Build OpenWrt Firmware

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        branch: [openwrt-24.10, v24.10.0-rc3]
        config: [base.config, alderlake.config]

    steps:
    - name: Checkout your repository
      uses: actions/checkout@v3

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Set up the build environment
      run: |
        sudo apt update
        sudo apt install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools rsync swig unzip zlib1g-dev file wget

    - name: 获取上游代码哈希
      id: get_hash
      run: |
        git ls-remote --heads https://github.com/immortalwrt/immortalwrt ${{ matrix.branch }} | cut -f1 > upstream_hash.txt
        echo "UPSTREAM_HASH=$(cat upstream_hash.txt)" >> $GITHUB_ENV
        echo "upstream_hash=$(cat upstream_hash.txt)" >> $GITHUB_OUTPUT

    - name: 恢复编译缓存
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          immortalwrt/build_dir
          immortalwrt/staging_dir
          immortalwrt/tmp
        key: openwrt-${{ matrix.branch }}-${{ matrix.config }}-${{ steps.get_hash.outputs.upstream_hash }}
        restore-keys: |
          openwrt-${{ matrix.branch }}-${{ matrix.config }}-

    - name: Clone ImmortalWrt source code
      run: |
        git clone -b ${{ matrix.branch }} --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt
        cd immortalwrt

    - name: Update feeds
      run: cd immortalwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd immortalwrt && ./scripts/feeds install -a

    - name: Copy custom .config
      run: |
        cp ${{ github.workspace }}/${{ matrix.config }} immortalwrt/.config
        cp ${{ github.workspace }}/build.sh immortalwrt/build.sh
        cp ${{ github.workspace }}/diy.sh immortalwrt/diy.sh

    - name: Run custom script
      run: |
        cd immortalwrt
        ./diy.sh

    - name: 编译工具链
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cd immortalwrt
        make toolchain/install -j$(nproc)
        
    - name: 编译软件包
      run: |
        cd immortalwrt
        make package/compile -j$(nproc) || make package/compile -j1 V=s
        
    - name: 编译固件
      id: compile
      run: |
        cd immortalwrt
        make target/install -j$(nproc) || make target/install -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "BRANCH_NAME=_${{ matrix.branch }}" >> $GITHUB_ENV
        echo "CONFIG_NAME=_${{ matrix.config }}" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ImmortalWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}${{ env.BRANCH_NAME }}${{ env.CONFIG_NAME }}
        path: immortalwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ImmortalWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}${{ env.BRANCH_NAME }}${{ env.CONFIG_NAME }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")_${{ matrix.branch }}_${{ matrix.config }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    # - name: Delete workflow runs
    #   uses: Mattraks/delete-workflow-runs@main
    #   with:
    #     retain_days: 
    #     keep_minimum_runs: 3

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@master
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
